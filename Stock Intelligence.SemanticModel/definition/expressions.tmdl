expression PathtoTickersCSV = "C:\Users\KlausFolz\Desktop\Repositories\Stock Intelligence\tickers.csv" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: bd280823-69d3-4fed-a864-fa0f936fe984
	queryGroup: Parameters

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression Interval = "1d" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: 29b8c2d7-5179-4c31-af66-f7fc9eae02fd
	queryGroup: Parameters

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression Range = "1y" meta [IsParameterQuery=true, Type="Text", IsParameterQueryRequired=true]
	lineageTag: e5e4eda3-38bf-4b3d-915b-3b5a70d0de55
	queryGroup: Parameters

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Text

expression dFundamentals = ```
		let
		    //Dynamic timestamps
		    NowLocal = DateTimeZone.LocalNow(),
		    NowDateTime = DateTimeZone.RemoveZone(NowLocal),
		    // Subtract 183 days - 6 months:
		    SixMonthsAgoDateTime = NowDateTime - #duration(183, 0, 0, 0),
		
		    Period1 = Number.ToText(
		        Number.RoundDown(
		            Duration.TotalSeconds(
		                SixMonthsAgoDateTime - #datetime(1970, 1, 1, 0, 0, 0)
		            )
		        )
		    ),
		    Period2 = Number.ToText(
		        Number.RoundDown(
		            Duration.TotalSeconds(
		                NowDateTime - #datetime(1970, 1, 1, 0, 0, 0)
		            )
		        )
		    ),
		
		    //Import the CSV of Tickers
		    Source = Csv.Document(
		        File.Contents(PathtoTickersCSV),
		        [Delimiter=",", Columns=1, QuoteStyle=QuoteStyle.None]
		    ),
		    #"Promoted Headers" = Table.PromoteHeaders(Source, [PromoteAllScalars=true]),
		    #"Changed Type" = Table.TransformColumnTypes(#"Promoted Headers", {{"Ticker", type text}}),
		
		    //fundamentals-timeseries API call for each Ticker
		    WithAPICall = Table.AddColumn(
		        #"Changed Type",
		        "APICall",
		        each
		            Web.Contents(
		                "https://query1.finance.yahoo.com",
		                [
		                    RelativePath = "ws/fundamentals-timeseries/v1/finance/timeseries/" & [Ticker],
		                    Query = [
		                        merge                  = "false",
		                        padTimeSeries         = "true",
		                        period1               = Period1,
		                        period2               = Period2,
		                        type                  = 
		                            "quarterlyMarketCap,trailingMarketCap," &
		                            "quarterlyEnterpriseValue,trailingEnterpriseValue," &
		                            "quarterlyPeRatio,trailingPeRatio," &
		                            "quarterlyForwardPeRatio,trailingForwardPeRatio," &
		                            "quarterlyPegRatio,trailingPegRatio," &
		                            "quarterlyPsRatio,trailingPsRatio," &
		                            "quarterlyPbRatio,trailingPbRatio," &
		                            "quarterlyEnterprisesValueRevenueRatio,trailingEnterprisesValueRevenueRatio," &
		                            "quarterlyEnterprisesValueEBITDARatio,trailingEnterprisesValueEBITDARatio",
		                        lang                  = "en-US",
		                        region                = "US"
		                    ]
		                ]
		            )
		    ),
		    WithParsedJSON = Table.AddColumn(
		        WithAPICall,
		        "ParsedJSON",
		        each Json.Document([APICall])
		    ),
		    //Transform the 'timeseries' data into a normalized table.
		    WithDataTable = Table.AddColumn(
		        WithParsedJSON,
		        "MetricsData",
		        each
		            let
		                rawJson   = [ParsedJSON],
		                timeSeriesRecord = rawJson[timeseries]?,
		                resultsList = timeSeriesRecord[result]?,
		
		                // Combine all metrics into a single list of records:
		                combinedRecords =
		                    if resultsList = null 
		                    then 
		                        {}
		                    else 
		                        List.Combine(
		                            List.Transform(
		                                resultsList,
		                                (metric) =>
		                                    let
		                                        // examples "trailingPeRatio", "quarterlyMarketCap"
		                                        metricType = metric[meta][type]{0},
		
		                                        // Timestamps list
		                                        tsList = metric[timestamp]?,
		
		                                        // Each metric's data array is stored under the same name as 'metricType'
		                                        // For example: metric["trailingPeRatio"] or metric["quarterlyMarketCap"]...
		                                        metricArray = Record.FieldOrDefault(metric, metricType, null)
		                                    in
		                                        if (tsList <> null and metricArray <> null) then
		                                            List.Transform(
		                                                List.Zip({tsList, metricArray}),
		                                                (pair) =>
		                                                    [
		                                                        timestamp       = pair{0},
		                                                        metricType      = metricType,
		                                                        asOfDate        = pair{1}[asOfDate]?,
		                                                        periodType      = pair{1}[periodType]?,
		                                                        rawValue        = pair{1}[reportedValue]?[raw]?,
		                                                        formattedValue  = pair{1}[reportedValue]?[fmt]?
		                                                    ]
		                                            )
		                                        else
		                                            {}
		                            )
		                        ),
		
		                // Convert list of records into a Table
		                dataTable = Table.FromRecords(combinedRecords)
		            in
		                dataTable
		    ),
		    ExpandedData = Table.ExpandTableColumn(
		        WithDataTable,
		        "MetricsData",
		        {"timestamp", "metricType", "asOfDate", "periodType", "rawValue", "formattedValue"},
		        {"timestamp", "metricType", "asOfDate", "periodType", "rawValue", "formattedValue"}
		    ),
		    //Convert 'timestamp' to a human-readable DateTime
		    WithDateTime = Table.TransformColumns(
		        ExpandedData,
		        {
		            {
		                "timestamp",
		                each #datetime(1970, 1, 1, 0, 0, 0) + #duration(0,0,0,_),
		                type datetime
		            }
		        }
		    ),
		    RenamedCols = Table.RenameColumns(
		        WithDateTime,
		        {
		            {"timestamp", "DateTime (UTC)"},
		            {"rawValue", "Raw Value"},
		            {"formattedValue", "Formatted Value"}
		        }
		    ),
		    //Remove JSON columns 
		    RemovedApiColumns = Table.RemoveColumns(RenamedCols, {"APICall", "ParsedJSON"}),
		    
		    ChangedTypes = Table.TransformColumnTypes(
		        RemovedApiColumns,
		        {
		            {"Raw Value", type number}
		        }
		    ),
		    #"Inserted Date" = Table.AddColumn(ChangedTypes, "Date", each DateTime.Date([#"DateTime (UTC)"]), type date),
		    #"Removed Other Columns" = Table.SelectColumns(#"Inserted Date",{"Date", "Raw Value", "periodType", "metricType", "Ticker"})
		in
		    #"Removed Other Columns"
		```
	lineageTag: 75a3d5a5-4f48-4630-af7b-f38116606ca0

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

